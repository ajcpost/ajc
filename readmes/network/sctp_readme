// Links
http://www.linuxquestions.org/questions/linux-newbie-8/sctp-support-in-linux-794932/
http://antoniindia.blogspot.com/2010/06/how-to-write-setup-sctp-client-server.html
http://sourceforge.net/projects/lksctp/

* Need to disable /etc/selinux/config SELINUX property
* Need to install lksctp, do a "modprobe -a sctp" after every reboot




* TCP   single association (1x1) between two network interfaces
* SCTP  multiple interfaces on client to multiple interfaces on server
* SCTP  multiple logical streams within an association
* SCTP  single socket can talk to multiple other hosts using association ID (todo)
        SOCK_STREAM vs SOCK_SEQPACKET
        server: not required to block on accept, sctp_recvmsg will do the trick
        client: use same socket to connec to many endpoints
* INADDR_ANY server will listen on all interfaces, client will choose only one



http://jan.newmarch.name/
http://www.linuxjournal.com/article/9749?page=0,0

--------------------------------------------------------------------------------------------------
     TCP                                                      SCTP
--------------------------------------------------------------------------------------------------
(0) * Can bind one or all... no subset                        * Can bind a subset
    * Concept of connection                                   * Concept of association
    * Single stream in a connection                           * Multiple streams in a connection
                                                                computer A can talk to B, C via single socket
                                                                e.g. control vs data, http download of images
    * App has to send length of the message                   * App need not send length
    * data sent as bytes, app to figure out new lines         * data received line by line

(1)  socket                                                   socket
     * ipv4/ipv6 support AF_INET/AF_INET6                     * ipv4/ipv6 support AF_INET/AF_INET6
     * no multiple addrs                                      * no multiple addrs

(2)  bind                                                     sctp_bindx
     * optional for client                                    * optional for client if specific addrs are not needed (todo)
     * ipv4/ipv6 support                                      * ipv4/ipv6 support, tricky to parse
     * no multiple addrs                                      * multiple addrs required
     *                                                        * bind of first, get ephemeral port, sctp_bindx of rest
                                                              * port must be SAME across all addrs

(3)  connect                                                  sctp_connectx
     * ipv4/ipv6 support                                      * ipv4/ipv6 support, tricky to parse
     * no multiple addrs                                      * multiple addrs required
                                                              * getpaddrs to get a list of peer addrs in association
                                                              * getladdrs to get a list of local addrs in association

(4)  stream negotiation                                       setsocketopt (sctp_initmsg), client < connect, server < listen
     * not required                                           getsocketopt (sctp_status), client > connect, server > accept

(5)  receive                                                  sctp_recvmsg
                                                              * no way to specify which stream to read on
                                                              * setsocketopt to enable getting stream info sctp_data_io_event
                                                              * need to loop until flags & MSG_EOR

(5)  send                                                     sctp_send (not sctp_sendmsg)
                                                              * SCTP, in contrast, makes an explicit demarcation of user message boundaries. Each message is delivered as a complete read, which lifts a lot of the work off the application layer. An exception to this is when the message is larger than the maximum packet size. Although, parts of two user messages will never be put into a single data packet.

Not supported
* Dynamic add/delete of bind/connect addresses
* Bind port must, even for client
* SOCK_SEQPACKET (only SOCK_STREAM), no association id support, one to many.
* In one to many, use sctp_sendmsg instead of sctp_send
* In one to many, graceful close of association is posssible by EOF
