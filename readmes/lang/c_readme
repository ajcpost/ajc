
* define function prototypes. without these, some c compilers assume function returns int
  and can take any no. of params.
* memset won't work on array of pointers.
* can't allocate memory to "file static" variables.
* .include to have only declarations, all definitions should go in .c
* include \n in strtok delimiter array to remove newlines from the read line
* core dumps at later point if arguments to vararg functions are not correct
* Following declaration causes core dump when initialized is used later in the program
  char *propertyValues[] = { };
  int initialized = 0;
* malloc (sizeof(variable)) vs malloc (sizeof(type))
* pass of uninitialized char pointer and expect changed value in calling function
  main { char *p = NULL;, f1(p) }  f1 (char *p) { malloc, strcpy }
* don't use _t since these may be reserved by OS
* be aware of changes to return values
  - all socket calls return -1 upon failure so ( < 0) check works
  - getaddrinfo returns a nonzero error code on failure so ( < 0) check will not work
* Use char **values; vs char *values[] for declaration. Compilers assumes 1 element and
  has resulted in memory corruption later.
* Platform specific: Linux doesn't have sa_len, ss_len, etc.
* Careful about socket structure sizes... Bind fail if sizeof sockaddr, success if sizeof
  sockaddr_in
* Pointer arithmetic: If want to increase by specific number, cast to (char *) before doing
  the addition.
* send,receive fail due to large PDU size in SCTP case.

